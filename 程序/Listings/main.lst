C51 COMPILER V9.57.0.0   MAIN                                                              07/15/2020 17:48:14 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\MDK\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <stc12c5a60s2.h>
   2          sbit k1=P1^5;
   3          unsigned int index=0;
   4          unsigned char blockbuff[16]={
   5            0x00,0x00,0x00,0x00,
   6            0x00,0x00,0x00,0x00,
   7            0x00,0x00,0x00,0x00,
   8            0x00,0x00,0x00,0x00
   9          };
  10          
  11          unsigned char sw=0,g=4;
  12          unsigned char blockcode1[]={0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00};
  13          unsigned char blockcode2[]={0x00,0x01,0x03,0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00};
  14          unsigned char blockcode3[]={0x00,0x01,0x03,0x07,0x0e,0x1c,0x38,0x70,0xe0,0xc0,0x80,0x00};
  15          unsigned char blockcode4[]={0x00,0x01,0x03,0x07,0x0f,0x1e,0x3c,0x78,0xf0,0xe0,0xc0,0x80,0x00};
  16          unsigned char i=0;
  17          unsigned char speed=200;
  18          bit en=0,rl=0,clear=0,keysta=1;//向右
  19          
  20          void Timer0Init();
  21          void changeblock();
  22          void swingblock();
  23          void keyaction();
  24          void blockscan();
  25          void keyscan();
  26          void keydriver();
  27          
  28          
  29          void main()
  30          {
  31   1        unsigned char j=0;
  32   1        EA=1;
  33   1        Timer0Init();
  34   1        
  35   1        while(1)
  36   1      {
  37   2        if(clear)
  38   2        {
  39   3          clear=0;
  40   3          speed=200;
  41   3          i=0;
  42   3          sw=0;
  43   3          g=4;
  44   3          rl=0;
  45   3          en=0;
  46   3          for(j=0;j<16;j++)
  47   3          {
  48   4            blockbuff[j]=0x00;
  49   4          }
  50   3        }
  51   2        keydriver();
  52   2      }
  53   1        
  54   1      }
C51 COMPILER V9.57.0.0   MAIN                                                              07/15/2020 17:48:14 PAGE 2   

  55          
  56          void Timer0Init(void)   //1毫秒@11.0592MHz
  57          {
  58   1        AUXR &= 0x7F;   //定时器时钟12T模式
  59   1        TMOD &= 0xF0;   //设置定时器模式
  60   1        TMOD |= 0x01;   //设置定时器模式
  61   1        TL0 = 0x66;   //设置定时初值
  62   1        TH0 = 0xFC;   //设置定时初值
  63   1        TF0 = 0;    //清除TF0标志
  64   1        TR0 = 1;    //定时器0开始计时
  65   1        ET0=1;
  66   1      }
  67          
  68          void T0inter() interrupt 1
  69          {
  70   1        TL0 = 0x66;
  71   1        TH0 = 0xFC;
  72   1        blockscan();
  73   1        keyscan();
  74   1        index++;
  75   1        if(index==speed)
  76   1        {
  77   2          index=0;
  78   2          swingblock();
  79   2        }
  80   1      }
  81          
  82          
  83          void changeblock()
  84          {
  85   1        switch(blockbuff[i-1])//看是什么形状
  86   1        {
  87   2          case 0x0f:sw=4;g=4;break;
  88   2          case 0x1e:sw=5;g=4;break;
  89   2          case 0x3c:sw=6;g=4;break;
  90   2          case 0x71:sw=7;g=4;break;
  91   2          case 0xf0:sw=8;g=4;break;
  92   2          
  93   2          case 0x07:sw=3;g=3;break;
  94   2          case 0x0e:sw=4;g=3;break;
  95   2          case 0x1c:sw=5;g=3;break;
  96   2          case 0x38:sw=6;g=3;break;
  97   2          case 0x70:sw=7;g=3;break;
  98   2          case 0xe0:sw=8;g=3;break;
  99   2          
 100   2          case 0x03:sw=2;g=2;break;
 101   2          case 0x06:sw=3;g=2;break;
 102   2          case 0x0c:sw=4;g=2;break;
 103   2          case 0x18:sw=5;g=2;break;
 104   2          case 0x30:sw=6;g=2;break;
 105   2          case 0x60:sw=7;g=2;break;
 106   2          case 0xc0:sw=8;g=2;break;
 107   2          
 108   2          case 0x01:sw=1;g=1;break;
 109   2          case 0x02:sw=2;g=1;break;
 110   2          case 0x04:sw=3;g=1;break;
 111   2          case 0x08:sw=4;g=1;break;
 112   2          case 0x10:sw=5;g=1;break;
 113   2          case 0x20:sw=6;g=1;break;
 114   2          case 0x40:sw=7;g=1;break;
 115   2          case 0x80:sw=8;g=1;break;
 116   2          
C51 COMPILER V9.57.0.0   MAIN                                                              07/15/2020 17:48:14 PAGE 3   

 117   2        }
 118   1        
 119   1      }
 120          
 121          //
 122          void swingblock()
 123          {
 124   1        if(en)
 125   1        {
 126   2          en=0;
 127   2          changeblock();
 128   2        }
 129   1        switch(g)
 130   1        {
 131   2          case 4:blockbuff[i]=blockcode4[sw];break;
 132   2          case 3:blockbuff[i]=blockcode3[sw];break;
 133   2          case 2:blockbuff[i]=blockcode2[sw];break;
 134   2          case 1:blockbuff[i]=blockcode1[sw];break;
 135   2        }
 136   1        if(blockbuff[i]==0) 
 137   1        {
 138   2          rl=~rl;
 139   2        }
 140   1        if(rl)
 141   1        {
 142   2          sw++;
 143   2        }
 144   1        else
 145   1        {
 146   2          sw--;
 147   2        }
 148   1      }
 149          
 150          //
 151          void keyaction()
 152          {
 153   1        speed-=10;
 154   1        if(i==0)
 155   1        {
 156   2          blockbuff[0]=blockcode4[sw];
 157   2          i++;
 158   2        }
 159   1        else
 160   1        {
 161   2          if(rl==1)
 162   2          {
 163   3            switch(g)
 164   3            {
 165   4              case 4:blockbuff[i]=blockcode4[sw-1]&blockbuff[i-1];break;
 166   4              case 3:blockbuff[i]=blockcode3[sw-1]&blockbuff[i-1];break;
 167   4              case 2:blockbuff[i]=blockcode2[sw-1]&blockbuff[i-1];break;
 168   4              case 1:blockbuff[i]=blockcode1[sw-1]&blockbuff[i-1];break;
 169   4            }
 170   3          }
 171   2          else
 172   2          {
 173   3            switch(g)
 174   3            {
 175   4              case 4:blockbuff[i]=blockcode4[sw+1]&blockbuff[i-1];break;
 176   4              case 3:blockbuff[i]=blockcode3[sw+1]&blockbuff[i-1];break;
 177   4              case 2:blockbuff[i]=blockcode2[sw+1]&blockbuff[i-1];break;
 178   4              case 1:blockbuff[i]=blockcode1[sw+1]&blockbuff[i-1];break;
C51 COMPILER V9.57.0.0   MAIN                                                              07/15/2020 17:48:14 PAGE 4   

 179   4            }
 180   3          }
 181   2          i++;
 182   2          if(blockbuff[i-1]==0)
 183   2          {
 184   3            clear=1;
 185   3          }
 186   2          else
 187   2          {
 188   3            en=1;
 189   3          }
 190   2        }
 191   1        
 192   1      }
 193            
 194          void blockscan()
 195          {
 196   1        static unsigned char i=0;
 197   1        P2=i;
 198   1        P0=~blockbuff[i];
 199   1        i++;
 200   1        if(i==17)i=0;
 201   1      }
 202            
 203          void keyscan()
 204          {
 205   1        static unsigned char keybuff=0xff;
 206   1        keybuff=(keybuff<<1)|k1;
 207   1        if((keybuff&0x0f)==0x00)
 208   1        {
 209   2          keysta=0;
 210   2        }
 211   1        else
 212   1        {
 213   2          keysta=1;
 214   2        }
 215   1      }
 216          
 217          void keydriver()
 218          {
 219   1        static bit backup=1;
 220   1        if(backup!=keysta)
 221   1        {
 222   2          if(backup==1  )
 223   2          {
 224   3            keyaction();
 225   3          }
 226   2          backup=keysta;
 227   2        }
 228   1      }
 229          
 230          
 231          
 232          
 233          
 234          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    688    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.57.0.0   MAIN                                                              07/15/2020 17:48:14 PAGE 5   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     70       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
